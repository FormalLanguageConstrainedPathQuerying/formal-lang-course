# Generated by Grammarinator 23.7.post76+gf3ffa71
# Modified by test authors

from math import inf
from grammarinator.runtime import *


KEYWORDS = {
    "let",
    "is",
    "graph",
    "remove",
    "vertex",
    "edge",
    "vertices",
    "from",
    "add",
    "to",
    "return",
    "where",
    "reachable",
    "in",
    "by",
    "for",
}


class ProgramGenerator(Generator):

    def prog(self, parent=None):
        with UnparserRuleContext(self, "prog", parent) as rule:
            current = rule.current
            with QuantifierContext(
                rule, 0, 1, inf, ProgramGenerator._quant_sizes[1], 0
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.stmt(parent=current)
            current = rule.current
            return current

    def stmt(self, parent=None):
        with UnparserRuleContext(self, "stmt", parent) as rule:
            current = rule.current
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[1],
                0,
                ProgramGenerator._alt_conds[1],
            ) as alt0:
                current = rule.current
                [self.bind, self.add, self.remove, self.declare][alt0()](parent=current)
            current = rule.current
            return current

    def declare(self, parent=None):
        with UnparserRuleContext(self, "declare", parent) as rule:
            current = rule.current
            self._reserve(3, self.T__0, parent=current)
            self._reserve(2, self.VAR, parent=current)
            self._reserve(1, self.T__1, parent=current)
            self.T__2(parent=current)
            return current

    def bind(self, parent=None):
        with UnparserRuleContext(self, "bind", parent) as rule:
            current = rule.current
            self._reserve(3, self.T__0, parent=current)
            self._reserve(2, self.VAR, parent=current)
            self._reserve(1, self.T__3, parent=current)
            self.expr(parent=current)
            return current

    def remove(self, parent=None):
        with UnparserRuleContext(self, "remove", parent) as rule:
            current = rule.current
            self._reserve(4, self.T__4, parent=current)
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[2],
                3,
                ProgramGenerator._alt_conds[2],
            ) as alt0:
                current = rule.current
                [self.T__5, self.T__6, self.T__7][alt0()](parent=current)
            current = rule.current
            self._reserve(2, self.expr, parent=current)
            self._reserve(1, self.T__8, parent=current)
            self.VAR(parent=current)
            return current

    def add(self, parent=None):
        with UnparserRuleContext(self, "add", parent) as rule:
            current = rule.current
            self._reserve(4, self.T__9, parent=current)
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[3],
                3,
                ProgramGenerator._alt_conds[0],
            ) as alt0:
                current = rule.current
                [self.T__5, self.T__6][alt0()](parent=current)
            current = rule.current
            self._reserve(2, self.expr, parent=current)
            self._reserve(1, self.T__10, parent=current)
            self.VAR(parent=current)
            return current

    def expr(self, parent=None):
        with UnparserRuleContext(self, "expr", parent) as rule:
            current = rule.current
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[4],
                0,
                ProgramGenerator._alt_conds[3],
            ) as alt0:
                current = rule.current
                [
                    self.NUM,
                    self.CHAR,
                    self.VAR,
                    self.edge_expr,
                    self.set_expr,
                    self.regexp,
                    self.select,
                ][alt0()](parent=current)
            current = rule.current
            return current

    def set_expr(self, parent=None):
        with UnparserRuleContext(self, "set_expr", parent) as rule:
            current = rule.current
            self._reserve(2, self.T__11, parent=current)
            self._reserve(1, self.expr, parent=current)
            with QuantifierContext(
                rule, 0, 0, inf, ProgramGenerator._quant_sizes[2], 1
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self._reserve(1, self.T__12, parent=current)
                        self.expr(parent=current)
            current = rule.current
            self.T__13(parent=current)
            return current

    def edge_expr(self, parent=None):
        with UnparserRuleContext(self, "edge_expr", parent) as rule:
            current = rule.current
            self._reserve(6, self.T__14, parent=current)
            self._reserve(5, self.expr, parent=current)
            self._reserve(4, self.T__12, parent=current)
            self._reserve(3, self.expr, parent=current)
            self._reserve(2, self.T__12, parent=current)
            self._reserve(1, self.expr, parent=current)
            self.T__15(parent=current)
            return current

    def regexp(self, parent=None):
        with UnparserRuleContext(self, "regexp", parent) as rule:
            current = rule.current
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[5],
                0,
                ProgramGenerator._alt_conds[3],
            ) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self.CHAR(parent=current)
                elif choice0 == 1:
                    self.VAR(parent=current)
                elif choice0 == 2:
                    self._reserve(2, self.T__14, parent=current)
                    self._reserve(1, self.regexp, parent=current)
                    self.T__15(parent=current)
                elif choice0 == 3:
                    self._reserve(2, self.regexp, parent=current)
                    self._reserve(1, self.T__16, parent=current)
                    self.regexp(parent=current)
                elif choice0 == 4:
                    self._reserve(5, self.regexp, parent=current)
                    self._reserve(4, self.T__17, parent=current)
                    self.myrange(parent=current)
                elif choice0 == 5:
                    self._reserve(2, self.regexp, parent=current)
                    self._reserve(1, self.T__18, parent=current)
                    self.regexp(parent=current)
                elif choice0 == 6:
                    self._reserve(2, self.regexp, parent=current)
                    self._reserve(1, self.T__19, parent=current)
                    self.regexp(parent=current)
            current = rule.current
            return current

    def myrange(self, parent=None):
        with UnparserRuleContext(self, "myrange", parent) as rule:
            current = rule.current
            self._reserve(3, self.T__11, parent=current)
            self._reserve(2, self.NUM, parent=current)
            self._reserve(1, self.T__20, parent=current)
            with QuantifierContext(
                rule, 0, 0, 1, ProgramGenerator._quant_sizes[3], 1
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.NUM(parent=current)
            current = rule.current
            self.T__13(parent=current)
            return current

    def select(self, parent=None):
        with UnparserRuleContext(self, "select", parent) as rule:
            current = rule.current
            with QuantifierContext(
                rule, 0, 0, 1, ProgramGenerator._quant_sizes[1], 11
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.v_filter(parent=current)
            current = rule.current
            with QuantifierContext(
                rule, 1, 0, 1, ProgramGenerator._quant_sizes[1], 11
            ) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.v_filter(parent=current)
            current = rule.current
            self._reserve(10, self.T__21, parent=current)
            self._reserve(9, self.VAR, parent=current)
            with QuantifierContext(
                rule, 2, 0, 1, ProgramGenerator._quant_sizes[4], 9
            ) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self._reserve(1, self.T__12, parent=current)
                        self.VAR(parent=current)
            current = rule.current
            self._reserve(8, self.T__22, parent=current)
            self._reserve(7, self.VAR, parent=current)
            self._reserve(6, self.T__23, parent=current)
            self._reserve(5, self.T__8, parent=current)
            self._reserve(4, self.VAR, parent=current)
            self._reserve(3, self.T__24, parent=current)
            self._reserve(2, self.VAR, parent=current)
            self._reserve(1, self.T__25, parent=current)
            self.expr(parent=current)
            return current

    def v_filter(self, parent=None):
        with UnparserRuleContext(self, "v_filter", parent) as rule:
            current = rule.current
            self._reserve(3, self.T__26, parent=current)
            self._reserve(2, self.VAR, parent=current)
            self._reserve(1, self.T__24, parent=current)
            self.expr(parent=current)
            return current

    def NUM(self, parent=None):
        with UnlexerRuleContext(self, "NUM", parent) as rule:
            current = rule.current
            with AlternationContext(
                rule,
                0,
                ProgramGenerator._alt_sizes[0],
                0,
                ProgramGenerator._alt_conds[0],
            ) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += "0"
                elif choice0 == 1:
                    current.src += self._model.charset(
                        current, 0, ProgramGenerator._charsets[1]
                    )
                    with QuantifierContext(
                        rule, 0, 0, inf, ProgramGenerator._quant_sizes[0], 0
                    ) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(
                                    current, 1, ProgramGenerator._charsets[2]
                                )
                    current = rule.current
            current = rule.current
            return current

    def VAR(self, parent=None):
        with UnlexerRuleContext(self, "VAR", parent) as rule:
            current = rule.current
            current.src += self._model.charset(
                current, 0, ProgramGenerator._charsets[3]
            )
            with QuantifierContext(
                rule, 0, 0, inf, ProgramGenerator._quant_sizes[0], 0
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(
                            current, 1, ProgramGenerator._charsets[4]
                        )
            current = rule.current
            if current.src in KEYWORDS:
                current.src += self._model.charset(
                    current, 1, ProgramGenerator._charsets[4]
                )
            return current

    def CHAR(self, parent=None):
        with UnlexerRuleContext(self, "CHAR", parent) as rule:
            current = rule.current
            current.src += '"'
            current.src += self._model.charset(
                current, 0, ProgramGenerator._charsets[3]
            )
            current.src += '"'
            return current

    def NEWLINE(self, parent=None):
        with UnlexerRuleContext(self, "NEWLINE", parent) as rule:
            current = rule.current
            with QuantifierContext(
                rule, 0, 1, inf, ProgramGenerator._quant_sizes[0], 0
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(
                            current, 0, ProgramGenerator._charsets[5]
                        )
            current = rule.current
            return current

    def WS(self, parent=None):
        with UnlexerRuleContext(self, "WS", parent) as rule:
            current = rule.current
            with QuantifierContext(
                rule, 0, 1, inf, ProgramGenerator._quant_sizes[0], 0
            ) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(
                            rule,
                            0,
                            ProgramGenerator._alt_sizes[0],
                            0,
                            ProgramGenerator._alt_conds[0],
                        ) as alt0:
                            current = rule.current
                            current.src += ["\t", " "][alt0()]
                        current = rule.current
            current = rule.current
            return current

    def T__0(self, parent=None):
        with UnlexerRuleContext(self, "T__0", parent) as rule:
            current = rule.current
            current.src += "let"
            return current

    def T__1(self, parent=None):
        with UnlexerRuleContext(self, "T__1", parent) as rule:
            current = rule.current
            current.src += "is"
            return current

    def T__2(self, parent=None):
        with UnlexerRuleContext(self, "T__2", parent) as rule:
            current = rule.current
            current.src += "graph"
            return current

    def T__3(self, parent=None):
        with UnlexerRuleContext(self, "T__3", parent) as rule:
            current = rule.current
            current.src += "="
            return current

    def T__4(self, parent=None):
        with UnlexerRuleContext(self, "T__4", parent) as rule:
            current = rule.current
            current.src += "remove"
            return current

    def T__5(self, parent=None):
        with UnlexerRuleContext(self, "T__5", parent) as rule:
            current = rule.current
            current.src += "vertex"
            return current

    def T__6(self, parent=None):
        with UnlexerRuleContext(self, "T__6", parent) as rule:
            current = rule.current
            current.src += "edge"
            return current

    def T__7(self, parent=None):
        with UnlexerRuleContext(self, "T__7", parent) as rule:
            current = rule.current
            current.src += "vertices"
            return current

    def T__8(self, parent=None):
        with UnlexerRuleContext(self, "T__8", parent) as rule:
            current = rule.current
            current.src += "from"
            return current

    def T__9(self, parent=None):
        with UnlexerRuleContext(self, "T__9", parent) as rule:
            current = rule.current
            current.src += "add"
            return current

    def T__10(self, parent=None):
        with UnlexerRuleContext(self, "T__10", parent) as rule:
            current = rule.current
            current.src += "to"
            return current

    def T__11(self, parent=None):
        with UnlexerRuleContext(self, "T__11", parent) as rule:
            current = rule.current
            current.src += "["
            return current

    def T__12(self, parent=None):
        with UnlexerRuleContext(self, "T__12", parent) as rule:
            current = rule.current
            current.src += ","
            return current

    def T__13(self, parent=None):
        with UnlexerRuleContext(self, "T__13", parent) as rule:
            current = rule.current
            current.src += "]"
            return current

    def T__14(self, parent=None):
        with UnlexerRuleContext(self, "T__14", parent) as rule:
            current = rule.current
            current.src += "("
            return current

    def T__15(self, parent=None):
        with UnlexerRuleContext(self, "T__15", parent) as rule:
            current = rule.current
            current.src += ")"
            return current

    def T__16(self, parent=None):
        with UnlexerRuleContext(self, "T__16", parent) as rule:
            current = rule.current
            current.src += "|"
            return current

    def T__17(self, parent=None):
        with UnlexerRuleContext(self, "T__17", parent) as rule:
            current = rule.current
            current.src += "^"
            return current

    def T__18(self, parent=None):
        with UnlexerRuleContext(self, "T__18", parent) as rule:
            current = rule.current
            current.src += "."
            return current

    def T__19(self, parent=None):
        with UnlexerRuleContext(self, "T__19", parent) as rule:
            current = rule.current
            current.src += "&"
            return current

    def T__20(self, parent=None):
        with UnlexerRuleContext(self, "T__20", parent) as rule:
            current = rule.current
            current.src += ".."
            return current

    def T__21(self, parent=None):
        with UnlexerRuleContext(self, "T__21", parent) as rule:
            current = rule.current
            current.src += "return"
            return current

    def T__22(self, parent=None):
        with UnlexerRuleContext(self, "T__22", parent) as rule:
            current = rule.current
            current.src += "where"
            return current

    def T__23(self, parent=None):
        with UnlexerRuleContext(self, "T__23", parent) as rule:
            current = rule.current
            current.src += "reachable"
            return current

    def T__24(self, parent=None):
        with UnlexerRuleContext(self, "T__24", parent) as rule:
            current = rule.current
            current.src += "in"
            return current

    def T__25(self, parent=None):
        with UnlexerRuleContext(self, "T__25", parent) as rule:
            current = rule.current
            current.src += "by"
            return current

    def T__26(self, parent=None):
        with UnlexerRuleContext(self, "T__26", parent) as rule:
            current = rule.current
            current.src += "for"
            return current

    _default_rule = prog

    _immutable_rules = (
        "T__0",
        "T__1",
        "T__10",
        "T__11",
        "T__12",
        "T__13",
        "T__14",
        "T__15",
        "T__16",
        "T__17",
        "T__18",
        "T__19",
        "T__2",
        "T__20",
        "T__21",
        "T__22",
        "T__23",
        "T__24",
        "T__25",
        "T__26",
        "T__3",
        "T__4",
        "T__5",
        "T__6",
        "T__7",
        "T__8",
        "T__9",
    )

    _rule_sizes = {
        "prog": RuleSize(3, 4),
        "stmt": RuleSize(2, 4),
        "declare": RuleSize(1, 4),
        "bind": RuleSize(2, 4),
        "remove": RuleSize(2, 5),
        "add": RuleSize(2, 5),
        "expr": RuleSize(1, 1),
        "set_expr": RuleSize(2, 3),
        "edge_expr": RuleSize(2, 7),
        "regexp": RuleSize(1, 1),
        "myrange": RuleSize(1, 4),
        "select": RuleSize(2, 11),
        "v_filter": RuleSize(2, 4),
        "NUM": RuleSize(0, 0),
        "VAR": RuleSize(0, 0),
        "CHAR": RuleSize(0, 0),
        "NEWLINE": RuleSize(0, 0),
        "WS": RuleSize(0, 0),
        "T__0": RuleSize(0, 0),
        "T__1": RuleSize(0, 0),
        "T__2": RuleSize(0, 0),
        "T__3": RuleSize(0, 0),
        "T__4": RuleSize(0, 0),
        "T__5": RuleSize(0, 0),
        "T__6": RuleSize(0, 0),
        "T__7": RuleSize(0, 0),
        "T__8": RuleSize(0, 0),
        "T__9": RuleSize(0, 0),
        "T__10": RuleSize(0, 0),
        "T__11": RuleSize(0, 0),
        "T__12": RuleSize(0, 0),
        "T__13": RuleSize(0, 0),
        "T__14": RuleSize(0, 0),
        "T__15": RuleSize(0, 0),
        "T__16": RuleSize(0, 0),
        "T__17": RuleSize(0, 0),
        "T__18": RuleSize(0, 0),
        "T__19": RuleSize(0, 0),
        "T__20": RuleSize(0, 0),
        "T__21": RuleSize(0, 0),
        "T__22": RuleSize(0, 0),
        "T__23": RuleSize(0, 0),
        "T__24": RuleSize(0, 0),
        "T__25": RuleSize(0, 0),
        "T__26": RuleSize(0, 0),
    }

    _alt_sizes = (
        (RuleSize(0, 0), RuleSize(0, 0)),  # 0
        (RuleSize(3, 4), RuleSize(3, 5), RuleSize(3, 5), RuleSize(2, 4)),  # 1
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 2
        (RuleSize(1, 1), RuleSize(1, 1)),  # 3
        (
            RuleSize(1, 1),
            RuleSize(1, 1),
            RuleSize(1, 1),
            RuleSize(3, 7),
            RuleSize(3, 3),
            RuleSize(2, 1),
            RuleSize(3, 11),
        ),  # 4
        (
            RuleSize(1, 1),
            RuleSize(1, 1),
            RuleSize(2, 3),
            RuleSize(2, 3),
            RuleSize(2, 6),
            RuleSize(2, 3),
            RuleSize(2, 3),
        ),  # 5
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1, 1),  # 1
        (1, 1, 1),  # 2
        (1, 1, 1, 1, 1, 1, 1),  # 3
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(3, 4),  # 1
        RuleSize(2, 2),  # 2
        RuleSize(1, 1),  # 3
        RuleSize(1, 2),  # 4
    )

    _charsets = (
        Generator._charset(((0x20, 0x7F),)),  # 0
        Generator._charset(((0x31, 0x3A),)),  # 1
        Generator._charset(((0x30, 0x3A),)),  # 2
        Generator._charset(((0x61, 0x7B),)),  # 3
        Generator._charset(
            (
                (0x30, 0x3A),
                (0x5F, 0x60),
                (0x61, 0x7B),
            )
        ),  # 4
        Generator._charset(
            (
                (0xA, 0xB),
                (0xD, 0xE),
                (0x20, 0x21),
            )
        ),  # 5
    )
